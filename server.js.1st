// server.js
const express       = require('express');
const Docker        = require('dockerode');
const { execSync }  = require('child_process');
const docker        = new Docker({ socketPath: '/var/run/docker.sock' });

const app = express();
app.use(express.json());
app.use(express.static('public')); // serve your index.html + JS/CSS

// human-readable uptime from the container’s StartedAt timestamp
function formatUptime(startedAt) {
  const diffMs = Date.now() - new Date(startedAt).getTime();
  const secs = Math.floor(diffMs / 1000) % 60;
  const mins = Math.floor(diffMs / 1000 / 60) % 60;
  const hrs  = Math.floor(diffMs / 1000 / 3600);
  return `${hrs}h ${mins}m ${secs}s`;
}

app.get('/containers', async (req, res) => {
  try {
    // 1) get all GPU-using processes on the host
    const raw = execSync(
      'nvidia-smi --query-compute-apps=pid,used_memory --format=csv,noheader,nounits'
    )
      .toString()
      .trim();

    // build a map: pid → used_memory (MiB)
    const gpuMap = raw
      ? Object.fromEntries(
          raw.split('\n').map(line => {
            const [pid, mem] = line.split(',').map(s => s.trim());
            return [pid, parseInt(mem, 10)];
          })
        )
      : {};

    // 2) list all containers
    const containers = await docker.listContainers({ all: true });
    const detailed = await Promise.all(containers.map(async c => {
      const container = docker.getContainer(c.Id);
      const info      = await container.inspect();
      const stats     = await container.stats({ stream: false });
      const memMiB    = (stats.memory_stats.usage || 0) / 1024 / 1024;

      return {
        id           : c.Id,
        name         : c.Names[0].replace(/^\//, ''),
        state        : c.State,  // "running" | "exited" | …
        uptime       : c.State === 'running'
                       ? formatUptime(info.State.StartedAt)
                       : '—',
        memoryMb     : memMiB.toFixed(1),
        gpuMemoryMb  : gpuMap[String(info.State.Pid)] || 0
      };
    }));

    res.json(detailed);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.message });
  }
});

app.post('/containers/:id/:action', async (req, res) => {
  const { id, action } = req.params;
  const container = docker.getContainer(id);

  if (!['start','stop','restart'].includes(action)) {
    return res.status(400).send('Invalid action');
  }

  try {
    await container[action]();
    res.sendStatus(204);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.message });
  }
});

const PORT = process.env.PORT || 3000;
const HOST = process.env.HOST || '0.0.0.0';

app.listen(PORT, HOST, () => {
  console.log(`Server listening at http://${HOST}:${PORT}`);
});
